#summary How to build and modify plugin

= Введение =

Enigma2 разбита на 2 части. Первая часть - это python-часть, а вторая - это C++ часть. Большинство плагинов написаны только на python, их легко менять с помощью обычного текстового редактора локально или по ftp сразу на вашем боксе.
Данный плагин содержит тоже python часть и её можно точно так же легко редактировать. Но кроме этого плагин содержит и C++ часть, а именно servicets библиотеку для воспроизведения видео потока. Менять её не просто и именно об этом пойдёт речь.

= Сборка toolchain =

Описание на русском есть здесь
http://dream.altmaster.net/showthread.php?t=2720
Так же можно найти много подобных инструкций на форумах

Кратко основные моменты сборки.

== подготовка ==
Во-первых нужен установленный линукс с 15 гигабайтами свободного места на разделе, который поддерживает систему прав. Т.е. какой-то linux раздел. У меня toolchain занял 12GB, но это я ещё не собирал всю прошивку, вообщем берите больше не ошибётесь! У меня на Debian 6.0 все прошло гладко и на Ubuntu тоже.

== непосредственно сборка ==
Далее качаем [http://git.opendreambox.org/?p=obi/makefile-opendreambox.git;a=tree тут] нужный makefile (oe16 или oe15). Сохраняем его в директорию где будет происходить сборка, открываем его, выбираем своё устройство и запускаем `make -f Makefile-opendreambox-1.6` Ещё нужно не забыть установить на вашей системе нужные утилиты для сборки. Об этом вам напомнит сам скрипт установки. 
После долгой и мучительной сборки у вас будет своя собранная прошивка для бокса. Вместо того, чтобы запускать `make -image`. Можно обойтись только сборкой энигмы для этого надо запустить `bitbake enigma2`. Теперь можно приступать к главной цели - сборка servicets

= Первое знакомство с bitbake и openembeded =
Вся документация есть тут
http://docs.openembedded.ru/

А я расскажу картко свой опыт
bitabke это инструмент для автоматизации сборки и компиляции в нашем случае прошивки и различных её частей. Каждая часть (она же цель) называется рецептом. Рецепты которые мы скачали из репозитория для сборки имиджа находятся в этой папке.
dm800/openembedded/recipes Запустить один из рецептов можно командой `bitbake имя_рецепта`. По умолчанию она выполнит скрипт сборки из этого рецепта. Нам ещё пригодится научится делать очистку `bitbake имя_рецепта -c clean` 

Теперь я расскажу как написать свой рецепт. В оригинале enigma2-plugins.bb собирает все плагины и каждый запаковывает в отдельный пакет. Для этого в каждой директории с плагином содержится xml файл с meta информацией о нём. Но наш рецепт будет только для одного плагина. Поэтому смело в начале рецепта пишем всю информацию о плагине. В последствие она будет использована для создания файла control в ipk пакете    
{{{
DESCRIPTION = "enigma2 iptv plugin for KartinaTV & RodnoeTV"
MAINTAINER = "Alex Maystrenko <alexeytech@gmail.com>"
HOMEPAGE = "http://code.google.com/p/kartinatv-dm/"
LICENSE = "GNU GPLv2"
SECTION = "extra"
#progect name
PN="enigma2-plugin-extensions-kartinatv"
#progect version
PV="1.6.0"
#progect release number
PR = "r0"
}}}
Комментарии как обычно начинаются с символа "#"

Далее выбираем какие будут собраны пакеты. У нас плагин простой, поэтому делить его отдельно на файлы для разработчиков на документацию и т.д. мы не будем. В случае сложной библиотеки мы бы поступили иначе, но в данном случае пишем
{{{
#Всё ставится в один пакет с именем нашего проэкта.
PACKAGES = " ${PN} "
SRC_URI = "file://${FILE_DIRNAME}/build"
S = "${WORKDIR}/build"

inherit autotools

#Дополнительные флаги для automake. Было изначально в enigma2-plugins.bb
EXTRA_OECONF = " \
        BUILD_SYS=${BUILD_SYS} \
        HOST_SYS=${HOST_SYS} \
        STAGING_INCDIR=${STAGING_INCDIR} \
        STAGING_LIBDIR=${STAGING_LIBDIR} \
"
FILES_${PN} += " /usr/share/enigma2/KartinaTV_skin /usr/lib/enigma2/python/Plugins/Extensions/KartinaTV"
}}}
SRC_URI отвечает за то откуда мы будем брать исходники. Поддерживается http/ftp/git/svn. Ну у нас исходники лежат в папке build, которая находится в каталоге с рецептом bb-файлом (его расположение хранится в перменной FILE_DIRNAME)
S - отвечает за то в каком каталоге будет происходить сборка. Bitbake перемещает все иходники в рабочую папку для сборки проэкта WORKDIR. В данном случае получилось dm800/build/tmp/work/mipsel-oe-linux/enigma2-plugin-extensions-kartinatv-1.6.0-r0
А дальше туда распаковывает SRC_URI (в нашем случае просто копирует папку build), Но если бы мы указали какой то архив, а в нём содержался бы каталог foo, то следовало бы указать `S = "${WORKDIR}/foo"`

Теперь следует сказать что наш плагин собирается с помощью autotools как все официальные плагины. Для этого я просто взял содержимое [https://schwerkraft.elitedvb.net/plugins/scmgit/cgi-bin/gitweb.cgi?p=enigma2-plugins/enigma2-plugins.git;a=tree репозитория с официальными палгинами] Все скрипты/макросы/makefiles для сборки оставил, а сами плагины выкинул. После этого вставил свой плагин в том же виде как организованы и официальные плагины (об этом отдельно). Т.е. теперь подкаталог kartinatv можно смело кидать в git со всеми enigma2 плагинами. 

Но что это значит для bb-рецепта? Это значит что нам надо добавить всего одну строчку `inherit autotools` и bitbake сам запустит automake с необходимыми параметрами, которые берутся в соответствии с toolchain собранного в начале.
`FILES_${PN}` - очень важный параметр. Указывает какие директории и файлы будут установлены в пакет. Если вдруг во время сборки цель install попытется поставить в директории не указанною в списке, то установка будет проигнорирована.

{{{
FILES_${PN}-meta = "${datadir}/meta"
PACKAGES += "${PN}-meta"

DEPENDS = "enigma2"
}}}

Теперь добавили ещё пакет с в который будут установлены мета-данный. Так было в оригинале, я оставил. И указали очевидные зависимости.

Для того чтоб запустить наш рецепт, то т.к. он не находится в стандартной директории с рецептами нужно дать комнаду
`bitbake -b enigma2-kartinatv.bb`
При условии что мы находимся в каталоге с рецептом и установили нужный enviroment
`source dm800/build/env.source`
Собранный пакет искать в директории dm800/build/tmp/deploy/ipk/mipsel