#summary howto add new iptv service support

<font color="red" size="3">*!under develop*</font>

= Концепция проекта =

IPtvDream плагин создан для просмотра различный iptv сервисов на ресиверах Dreambox и других на основе enigma2/Linux. Основные цели проекта сделать просмотр iptv таким  же удобным как спутниковое тв, и дать возможность сторонним разработчикам как можно проще добавлять свои iptv сервисы.

= Структура АПИ =

В каталоге /api хранятся *.py файлы с помощью которых разработчики добавляют свои сервисы. При запуске IPtvDream импортирует все файлы из /api и загружает найденные сервисы. Для каждого сервиса нужен свой файл в /api. Но не обязательно каждый файл в /api описывает какой-то сервис, это могут быть просто некоторые необходимые библиотеки.

Чтоб объявить новый  сервис нужно в новом файле с /api объявить сlass Ktv.
Список каналов channels. типа dict.

Логика работы  плагина типа stream с API

Запуск начинается с вызова start(self). В этой функции производится авторизация и другие необходимые действия.

Потом вызывается setTimeShift(self, timeShift). У некотрых сервисов есть возможность показывать каналы записанные несколько часов назад. Параметр timeShift передается в часах.

Вызов 	setChannelsList(self). В этой функции предполагается загрузка списка каналов. Если есть возможность получить этим же одним запросом EPG или другую информацию сделайте это тут, чтобы в дальнешем IPtvDream не делал другие запросы, и время запуска ускорилось.
Эта функция вызывается после setTimeShift, т.к. список каналов может ависеть от настроек сдвига времени.

Если необходимо показать список каналов, IPtvDream хочет показать EPG для этих каналов. Вызывается функция getChannelsEpg(self, cids). Параметр cids - список id необходимых каналов. Если есть возможность получить не только текущие передачи на каналах, но и следующую передачу сделайте это.

В режиме просмотра какого-то одного канала, IPtvDream хочет получить текущую и следующую передачу на этом канале. Вызывается функция epgCurrent(self, cid). Параметр cid - id нужного канала. Если нет возможность получить текущую и следующую передачу одним запросом (или вообще невозможно получить следующую передачу), вы должны реализовать получение следующей передачи в epgNext(self, cid). Для большей скорости работы лучше получить всю информацию одним запросом.

Для аналогичной ситуации но при работе с архивом используются функции getGmtEpg(self, cid) и getGmtEpgNext(self, cid) 

Если нужно получить телепрограмму для выбранного канала на целый день, вызывается функция getDayEpg(self, cid, date = None). Где date это объект типа datetime. По умолчанию должно загружатся телепрограмма на текущий день.
#TODO: no list here! Use readable and abstract code! 

Если,  например при просмотре архива, возникает необходимость....	 
	def getGmtEpg(self, cid): 
		"""Plugin call this function if it wants to access epg that was self.aTime seconds before now. 
		   If you can download epg next that was self.aTime seconds before also in this request, do it here.""" 
		#TODO: getGmtEpgNext() !!!!!! Also utils! 
		pass

getPiconName(self, cid) Используется для получения имени пикона, который будет отображен в инфобаре. По умолчанию возвращает "%s_%s" % (self.iName, cid). Но вы можете сделать поиск пикона например по имени канала, а не по cid. 


Логика работы API и IPtvDream с данными.
Все данные о каналах и EPG этих каналов хранятся в классе API в поле channels типа dict.
IPtvDream вызывает функции API которые наполняют эти данные.
Потом IPtvDream забирает эти данные и работает с ними и отображает.
Типа данных и некоторые методы для работы с ними объявлены в utils.py. Class Bouquet хранит список id каналов котоpрый будет отображаться в gui и использоваться при переключении каналов. 


Список EPG функций которые нужны нашему GUI 
Получение EPG из кэша.
- получить передачу в заданный момент времени. А так же её время начала, окончания, полную длину и время оставшееся до окончания.
- получить передачу которая будет после передачи идущей в заданный момент времени. 
А так же её вермя начала, окончания и полную длину.
- Предыдущие две функции для списка каналов.
- Получить список передач в заданном интервале времени, включае передачи частично попавшие в заданный интервал времени. А так же их время начала и окончания.
- Предыдущая функция для списка каналов.
- В перспективе поиск по передачам.
А именно:
All time variables are datetime.datetime instances
Функция
Описание
epgCurrent(self, time)
Returns EpgEntry that goes at given time
epgNext(self, time)
Returns EpgEntry that goes just after epgCurrent
epgPeriod(self, tstart, tend)
Returns list of EpgEntry
epgDay(self, date)
Returns epgPeriod from tstart = date to date + 24 hours

Функции которые должно предоставлять API
EpgEntry class
class EpgEntry():
	def __init__(self, name, t_start, t_end):
name — all available text info about the program. (First line is treated as program headline, next lines are description)
t_start — time of the begining  of the program.
t_end — time of the ending of the program. Some epg services doesn't provide such information, so this parameter is not neseccary(could be set to None)

Запросы на обновление информации в кэше.
- Аналогичны запросам получения EPG
- Плюс какая то функция для оптимальной загрузки всего EPG. (В перспективе будет использоваться в бэкграунде)
Т.к. запросы по получению EPG которое идёт сейчас (live) и в какой-то заданный момен времени могу отличатся то вводятся 2 функции.
А именно:
Функция
Описание
getChannelsEpg(self, cids)

getCurrentEpg(self, cid)

getNextEpg(self, cid)

getDayEpg(self, cid, date = None)

getPeriodEpg(self, cid, tstart, tend)

getGmtEpg(self, cid)

getNextGmtEpg(self, cid)



